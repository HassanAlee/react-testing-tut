Jest is a Javascript testing framework which finds and runs the test and returns the reports in human readable format.
React Testing Library is a utility which provides the virtual dom for testing react components.React testing library is a part of Testing library.
Vid#7:Anatomy of a Test: test(name,fn,timeout).test and expect are provided globally by Jest.
Vid#8:Created a basic text with Greet component.
Vid#9:Test Driven Development(TDD) is a software development process where you write test before writing the software code.This approach involves three steps in first just write the test and run and at this point test will fail for sure.In second step write the code and then run the test and in third step optimize the code and making sure all the tests still pass.This is called red-green testing.
Vid#10:Watch mode is an option by jest and it only runs tests present on the files which are changed since the last commit.
Vid#11:We have multiple ways to filter the test some options are available in the watch mode terminal and apart from those option we can also use skip() and only() method on the global test method to filter the tests.
Vid#12:We can group tests together using describe(name,fn).We can also use multiple describe in a same file and also skip and only method on describe. We can also nest describe inside another describe.Test suites refers to file not geoup.
Vid#13:With Jest and RTL we can have three types of file conventions .test.{ts,tsx},.spec(.ts,tsx) or we can have a __tests__ folder and inside it we can place all tests.Generally we should keep the tests with close to the components for whuch the test is. We can also use "it" instead of test method. If were are using it method then for the only we use fit and for skip we use xit.
Vid#14:Code coverage is a metric that helps to understand how much software code is tested.We can set the setting in package.json to know jest how and which files to cover and not to cover in coverage report:
            "coverage": "npm test -- --coverage --watchAll --collectCoverageFrom='src/components/**/*.{ts,tsx}' --collectCoverageFrom='!src/components/**/*.{types,stories,constants,test,spec}.{ts,tsx}'"
We can also set jest threshold like atleast that percentage of code should be covered:
              "jest": {
    "coverageThreshold": {
      "global": {
        "branches": 80,
        "functions": 80,
        "lines": 80,
        "statements": -10
      }
    }
  }
Vid#16:What to test? We should test that component renders,component renders with props,component renders correctly in different states and component reacts to events.We should not test implementation details,third party code and the code taht is not important for a user's point of view.
Vid#17:Queries are the methods that testing library provides to find element on the page.To find single element we have:getBy,queryBy,findBy and for the multiple elements we have getAllBy,queryAllBy and findAllBy.
Vid#18:getByRole. You can visit the testing library docs and there roles for all the HTML elements are mentioned.
Vid#19:There are different options that we can pass to getByRole query method. We to pass these options b/c sometimes we may have multiple elements with same role so we need to differentiate between them like we did for input,textarea and headings in our example.There are few other options like selected,checked and disable etc.
Vid#20:getByLableText query will search for the label text that matches the given text,then find the element associated with that label.
Vid#21:getByPlaceholderText will look for the element with placeholder attribute and match the given text with placeholder text.
Vid#22:getByText query methods will search for all the the elements that have a text node with textContent matching the gicen text.Typically used for paragraphs,div or span.
Vid#23:getByDisplayValue returns the input,textarea or select element that has the matching display value.
Vid#24:getByAltText will return the element which has the given alt text.img,input area or custom html element.
Vid#25:getByTitle return the element that has the matching title attribute.
Vid#26:getByTestId returns the element that has the matching data-testid attribute.
Vid#27:Order of queries:getByRole,getByLableText,getByPlaceholderText,getByText,getByDisplayValue,getByAltText,getByTitle,getByTestId.This is the order for writing tests.
Vid#28:getAllBy** returns an array of all the matching nodes.
Vid#29:First argument to the query method is called textMatch and it can be a string,regex or a function.<div>Hello World</div>, if we need to finc this we can use screen.getByText('Hello World') or('hello world',{exact:false}). Second way we can use regex screen.getByText(regex here..) and third we can use function like screen.getByText((content)=>content.startWith('Hello)). This function has two parameters content and element and both are optional. This is substring matching like we are not matchig the entore string.
Vid#30:queryBy returns the matching node for a query and returns null if not element matches. Useful for asserting element that is not present.Throws error if finds more than one so in this case use queryAllBy. All the query methods that we check with getBy and getAllBy can also be used as queryBy queryAllBY.
Vid#31:We have some appearing/disappearing scenarios in which something appears/disappears after sometime in such cases we use findBy and findAllBy query methods.findBy returns a promise which resolves when an element found which matches the given query.The promises is rejected if no element is found or more than one element is found in default 1000ms.findAllBy resolves into an array.
Vid#32:RTL privide three types of queries getBy/getAllBy,queryBy/queryAllBY and findBy/findAllBy. In addition to this we can use the dom query selector but that is not recommended.
Vid#33:We can use the debug method by screen to see the state of DOM tree at any point during the test we can also use logRoles from testing library to see the aria roles in dom.
Vid#34:Testing playground is a chrome extension which helps to write queries but this is now not present on Mozila as well as chrome.
Vid#36:Explored pointer events. For pointer we have to used user-event package which comes with RTL. onClick,onDblClick,onTrippleClick,onHOver and onUnhover these are nonvinence events which internally call pointer events.We can also use low level pointer event as well.
Vid#37:Created tests for keyboard interaction and checked type and tab apis. We alos have select,deselect etc as utility apis also we have clipboard apis like copy,cut and paste.
Vid#38:For rendering a component wrapped in a provider we need to pass extra options object in render with wrapper equals to provider.Like render(<MuiMode/>,{wrapper:AppProviders}).
Vid#39:This above approach is right if we have few components which need context provider but for like ThemeProvider or Redux store provider almost all components inside application need their context so in that case passing wrapper with each render is a bit hectic instead we can create a custom render function and then instead of importing screen,render from testing library import it from custom which has the wrapper passed at the top level then no need to pass wrapper option with each component test.
Vid#40|41:For rendering custom hooks we use renderHook method.Almost every method is wrapped by testing library in a "act" wrapper.But in case of custom hooks testing if you want to use any function which will chnage some state you need to wrap that function invocation in the act utility in the test.